19. modules/vnmanager/utils/asset_selector.js
   * Design Philosophy: Ease of use
     A user can just drag & drop his songs (Happy.wav), backgrounds (Forest.png) and sprites (Laura_Happy.png) and the system
     will process it all through the context in the file name. No need for manual complicated configurations.
   * Purpose: Selects the most appropriate background image and background music (OST) for a given scene
     description. It can use LLM-based reasoning and/or vector similarity search for OST selection.
   * Main Functions:
       * selectBestBackground(sceneDescription, backgrounds, callLlm): Prompts an LLM to choose the best background from a list of filenames. It respects the `settings.assetSelector.enableBackground` setting.
       * createBackgroundSelectionPrompt(scene, filenames): Creates the LLM prompt for background selection.
       * findMatchingBackground(response, backgrounds, filenames): Parses the LLM response to find the matching background filename.
       * getVectorStoreForOST(cacheKey, ostList): Initializes and caches a ChromaDB vector store for OST filenames.
       * performVectorSearch(sceneDescription, ostList, cacheKey): Performs similarity search on OST filenames to get relevant candidates.
       * mapVectorSearchResults(results, ostList): Maps vector search results back to original OST file paths.
       * selectBestOST(sceneDescription, ostList, useVectorSearch, cacheKey, callLlm): Prompts an LLM to choose the best OST from a list, optionally pre-filtering candidates using vector search. It respects the `settings.assetSelector.enableOST` setting.
       * createOSTSelectionPrompt(sceneDescription, candidates): Creates the LLM prompt for OST selection.
       * findMatchingOST(response, ostList): Parses the LLM response to find the matching OST filename.
   * Modularity: High. Focused on asset selection.
   * Dependencies: utils.js (for openrouterRequest, getFilename, Logger, readSettings), @langchain/community/vectorstores/chroma, @langchain/ollama, path.
   * Flow Analysis: Called by `vnmanager.js` during the VN transformation process.


  20. modules/vnmanager/utils/dialogue_processor.js


   * Purpose: Processes raw text into a visual novel dialogue format. It identifies character dialogue,
     formats it, and asynchronously triggers Text-to-Speech (TTS) generation for dialogue lines.
   * Main Functions:
       * isValidCharacterName(character): Validates if a string is a plausible character name (e.g., not too long, no verbs).
       * cleanTtsText(text): Cleans text for TTS by removing parenthetical notes and extra whitespace.
       * sanitizeForCrc(str): Sanitizes text for CRC calculation by replacing special characters.
       * requestTtsGeneration(scriptText, socket): Sends a payload to an external TTS API endpoint (`settings.ttsApiEndpoint`) for audio generation. It respects the `settings.enableTTS` setting and emits `vn-tts-complete` or `vn-tts-error` events via the provided socket.
       * createDialogueTransformPrompt(text): Creates an LLM prompt to format text into VN dialogue. It uses `uncensorify.txt` if `settings.useUncensorifyPrompt` is true.
       * processDialogueLines(text, callLlm, socket): The main function:
           * Calls an LLM (via `callLlm`) to transform the text into VN dialogue format.
           * Asynchronously initiates TTS generation via `requestTtsGeneration`.
           * Parses the LLM's output to identify dialogue lines and characters for emotion classification.
   * Modularity: High. Focused on dialogue formatting and TTS integration.
   * Dependencies: utils.js (for Logger, readSettings), axios, crc-32, fs, path.
   * Flow Analysis: Called by `vnmanager.js` as the first step in VN transformation. It's responsible for
      structuring the raw story text into VN commands and initiating TTS.


  21. modules/vnmanager/utils/emotion_classifier.js


   * Purpose: Classifies the emotional state of characters based on their dialogue. It extracts possible
     emotions from sprite filenames and uses an LLM to predict the most suitable emotion for each dialogue
     line.
   * Main Functions:
       * extractEmotionList(sprites): Derives a list of possible emotions from available sprite filenames, excluding generic terms.
       * createEmotionClassificationPrompt(dialogues, emotionList): Creates the LLM prompt for batch emotion classification.
       * parseEmotionResponse(response, emotionList, dialogues): Parses the LLM's response to extract classified emotions, with fallback to neutral if parsing fails.
       * batchClassifyEmotions(dialogues, sprites, callLlm): The main function to classify emotions for a batch of dialogue lines using
         an LLM. It respects the `settings.emotionClassifier.enabled` setting and uses `settings.emotionClassifier.quality` for the LLM call.
   * Modularity: High. Focused on emotion classification.
   * Dependencies: utils.js (for getFilename, Logger, readSettings).
   * Flow Analysis: Called by `vnmanager.js` during VN transformation to determine character expressions.


  21. modules/vnmanager/utils/genderguesser.js


   * Purpose: A utility to guess the gender of a given name using a pre-loaded dataset.
   * Main Functions:
       * constructor(): Loads firstnames.json data.
       * guessGender(): Attempts to guess gender (male/female/unknown) and confidence.
   * Modularity: High. Self-contained utility.
   * Dependencies: fs, path. Depends on an external gender-guesser npm package's data.
   * Flow Analysis: Used by sprite_finder.js as a fallback strategy for finding generic gender-specific
     sprites.

  23. modules/vnmanager/utils/player_choice_generator.js


   * Purpose: Generates player choices for visual novel scenes, offering different archetypes and formats.
   * Main Functions:
       * parseStructuredChoices(responseText): Parses a structured JSON response from the LLM into an array of choice objects.
       * parseSimpleChoices(responseText): Parses a simple numbered list response from the LLM into an array of choice objects with default properties.
       * generatePlayerChoices(sceneText, callLlm, options): The main function to generate player choices. It uses a random roll to determine the type of choices to generate (free-form input, simple numbered list, or structured JSON with risk/reward analysis). It calls the LLM (`callLlm`) with a tailored prompt based on the chosen type. The choices can be generated with archetypes such as Brave/Direct, Cautious/Observant, Clever/Diplomatic, Evil, Neutral/Observant, Good/Positive, Flirty/Direct, or Mature/Intimate.
   * Modularity: High. Focused on player choice generation.
   * Dependencies: utils.js (for Logger).
   * Flow Analysis: Called by `vnmanager.js` during the VN transformation process to provide interactive options for the player.

  24. modules/vnmanager/utils/sprite_finder.js


   * Purpose: Finds the most appropriate character sprite (image file) for a given character name and
     emotional state. It employs various matching strategies, including exact matches, fuzzy matches, and
     gender-based fallbacks.
   * Main Functions:
       * getGenderGuesser(): Lazily initializes the `GenderGuesser` instance.
       * stripHonorifics(name): Removes common Japanese honorifics from character names.
       * findExactMatch(sprites, normalizedChar, emotion): Finds an exact match for a sprite filename.
       * findFirstNameMatch(sprites, firstName, emotion): Finds a match based on the character's first name.
       * findFuzzyCharacterMatch(sprites, normalizedChar, emotion): Performs a fuzzy match on character names.
       * findEmotionMatch(sprites, normalizedChar, emotion): Finds a match based on emotion.
       * findCharacterNeutralMatch(sprites, normalizedChar, firstName): Finds a neutral sprite for the character.
       * findNeutralEmotionMatch(sprites, emotion): Finds a neutral sprite with a specific emotion.
       * findGenderBasedMatch(sprites, character): Attempts to find a gender-specific generic sprite using `GenderGuesser`.
       * findGenericMatch(sprites): Finds a generic sprite.
       * findSprite(character, emotion, sprites, mainCharacter): The main function that orchestrates the search through different strategies to find the
          best sprite, falling back to `generic_npc.png` if no specific match is found. It skips the main character if specified.
   * Modularity: High. Encapsulates sprite matching logic.
   * Dependencies: utils.js (for getFilename, normalizeText, Logger), vnmanager/utils/genderguesser.js, string-similarity.
   * Flow Analysis: Called by `vnmanager.js` after emotion classification to select the actual image file
      for each character's appearance.

  25. modules/vnmanager/utils/sprite_positioner.js


   * Purpose: Determines the on-screen position (left, center, right) for character sprites throughout the
     visual novel sequence. It manages character "heat" (how often they appear) and tries to keep characters
     in consistent positions while handling new characters or characters leaving the scene.
   * Main Functions:
       * determineAction(): Identifies if a command is a 'show' or 'hide' action.
       * findReplacementPosition(): Finds the best position to replace if all slots are full.
       * handleShowAction(): Logic for placing a character when they appear.
       * handleHideAction(): Logic for removing a character when they hide.
       * computeSpritePositions(): The main function that iterates through all VN commands and assigns sprite
         positions for each step, returning the final sequence with sprite placement information.
   * Modularity: High. Focused on sprite positioning logic.
   * Dependencies: utils.js.
   * Flow Analysis: Called by vnmanager.js as the final step in VN transformation, after sprites have
     been identified. It adds the sprites (left, center, right) property to each command in the sequence.

  26. modules/vnmanager/vnmanager.js (Visual Novel Transformation Orchestrator)

   * Purpose: This module orchestrates the entire process of transforming raw story text and chapter data into a complete visual novel turn. It coordinates various sub-modules to handle asset selection (backgrounds, OSTs), emotion classification, sprite arrangement, player choice generation, and integration of orchestrator feedback.

   * Main Functions:
       * processedLines(outputLines, dialoguesToClassify, sprites, mainCharacter): Processes dialogue lines, classifies emotions, and finds sprites for each line.
       * transformVNProject(projectName, text, sprites, backgrounds, osts, mainCharacter, lastSearchstring, progress, chapterData): The main function that orchestrates the VN transformation pipeline. It runs various sub-processes in parallel, including:
           * Initializing Fact Manager.
           * Processing dialogue lines (`dialogue_processor.processDialogueLines`).
           * Conditionally running the periodic orchestrator (`orchestrator.runPeriodic`).
           * Selecting best background (`asset_selector.selectBestBackground`).
           * Selecting best OST (`asset_selector.selectBestOST`).
           * Generating player choices (`player_choice_generator.generatePlayerChoices`).
           * Extracting and storing facts (`fact_manager.extractAndStoreFacts`).
           * Computing sprite positions (`sprite_positioner.computeSpritePositions`).
           * Reports progress via socket.

   * Modularity: High. It acts as an orchestrator, delegating specific tasks to its utility sub-modules.

   * Dependencies: `../utils.js` (for `openrouterRequest`, `readSettings`, `TurnLogger`, `Logger`, `reportProgressUtil`), `socket.io-client`, `./utils/asset_selector.js`, `./utils/emotion_classifier.js`, `./utils/sprite_finder.js`, `./utils/sprite_positioner.js`, `./utils/dialogue_processor.js`, `../orchestrator.js`, `./utils/player_choice_generator.js`, `./utils/fact_manager.js`.

   * Flow Analysis:
       1. Trigger: `transformVNProject` is called by `main.js` (specifically `vnHandlers.generateVNTurn`).
       2. Initialization: Initializes the Fact Manager for the project.
       3. Dialogue Processing: Calls `dialogue_processor.processDialogueLines` to structure the raw text.
       4. Parallel Processing: Concurrently executes:
           * `processedLines` (which in turn calls `emotion_classifier.batchClassifyEmotions` and `sprite_finder.findSprite`).
           * `asset_selector.selectBestBackground`.
           * `asset_selector.selectBestOST`.
           * `player_choice_generator.generatePlayerChoices`.
           * `orchestrator.runPeriodic` (conditionally, based on `VN_MANAGER_CONFIG.ORCHESTRATOR_INTERVAL`).
           * `fact_manager.extractAndStoreFacts`.
       5. Sprite Positioning: After `processedLines` completes, `sprite_positioner.computeSpritePositions` is called to determine on-screen sprite placement.
       6. Result: Returns a comprehensive object containing the final VN sequence, selected background, song, player choices, and orchestrator feedback for rendering in the UI.
       7. Progress Reporting: Uses `reportProgressUtil` to send progress updates to the renderer via a socket.